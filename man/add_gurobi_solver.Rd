% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_gurobi_solver.R
\name{add_gurobi_solver}
\alias{add_gurobi_solver}
\title{Add a \emph{Gurobi} solver}
\usage{
add_gurobi_solver(
  x,
  gap = 0.1,
  time_limit = .Machine$integer.max,
  presolve = 2,
  threads = 1,
  first_feasible = FALSE,
  numeric_focus = FALSE,
  node_file_start = Inf,
  start_solution = NULL,
  verbose = TRUE
)
}
\arguments{
\item{x}{\code{\link[=problem]{problem()}} object.}

\item{gap}{\code{numeric} gap to optimality. This gap is relative
and expresses the acceptable deviance from the optimal objective.
For example, a value of 0.01 will result in the solver stopping when
it has found a solution within 1\% of optimality.
Additionally, a value of 0 will result in the solver stopping
when it has found an optimal solution.
The default value is 0.1 (i.e., 10\% from optimality).}

\item{time_limit}{\code{numeric} time limit (seconds) for generating solutions.
The solver will return the current best solution when this time limit is
exceeded. The default value is the largest integer value
(i.e., \code{.Machine$integer.max}), effectively meaning that solver
will keep running until a solution within the optimality gap is found.}

\item{presolve}{\code{integer} number indicating how intensively the
solver should try to simplify the problem before solving it. Available
options are: (-1) automatically determine the intensity of
pre-solving, (0) disable pre-solving, (1) conservative
level of pre-solving, and (2) very aggressive level of pre-solving .
The default value is 2.}

\item{threads}{\code{integer} number of threads to use for the
optimization algorithm. The default value is 1.}

\item{first_feasible}{\code{logical} should the first feasible solution be
be returned? If \code{first_feasible} is set to \code{TRUE}, the solver
will return the first solution it encounters that meets all the
constraints, regardless of solution quality. Note that the first feasible
solution is not an arbitrary solution, rather it is derived from the
relaxed solution, and is therefore often reasonably close to optimality.
Defaults to \code{FALSE}.}

\item{numeric_focus}{\code{logical} should extra attention be paid
to verifying the accuracy of numerical calculations? This may be
useful when dealing with problems that may suffer from numerical instability
issues. Beware that it will likely substantially increase run time
(sets the \emph{Gurobi} \code{NumericFocus} parameter
to 3). Defaults to \code{FALSE}.}

\item{node_file_start}{\code{numeric} threshold amount of memory (in GB).
Once the amount of memory (RAM) used to store information for solving
the optimization problem exceeds this parameter value, the solver
will begin storing this information on disk
(using the \emph{Gurobi} \code{NodeFileStart} parameter).
This functionality is useful if the system has insufficient memory to
solve a given problem (e.g., solving the problem with default settings
yields the \verb{OUT OF MEMORY} error message) and a system with more memory is
not readily available.
For example, a value of 4 indicates that the solver will start using
the disk after it uses more than 4 GB of memory to store information
on solving the problem.
Defaults to \code{Inf} such that the solver will not attempt
to store information on disk when solving a given problem.}

\item{start_solution}{\code{NULL} or object containing the starting solution
for the solver. This is can be useful because specifying a starting
solution can speed up the optimization process.
Defaults to \code{NULL} such that no starting solution is used.
To specify a starting solution, the argument to \code{start_solution} should
be in the same format as the planning units (i.e., a \code{NULL}, \code{numeric},
\code{matrix}, \code{data.frame}, \code{\link[terra:rast]{terra::rast()}}, or \code{\link[sf:sf]{sf::sf()}} object).
See the Start solution format section for more information.}

\item{verbose}{\code{logical} should information be printed while solving
optimization problems? Defaults to \code{TRUE}.}
}
\value{
An updated \code{\link[=problem]{problem()}} object with the solver added to it.
}
\description{
Specify that the \href{https://www.gurobi.com/}{\emph{Gurobi}} software
should be used to solve a conservation planning problem
(Gurobi Optimization LLC 2021). This function can also be used to
customize the behavior of the solver.
It requires the \pkg{gurobi} package to be installed
(see below for installation instructions).
}
\details{
\href{https://www.gurobi.com/}{\emph{Gurobi}} is a
state-of-the-art commercial optimization software with an R package
interface. It is by far the fastest of the solvers available for
generating prioritizations, however, it is not freely
available. That said, licenses are available to academics at no cost. The
\pkg{gurobi} package is distributed with the \emph{Gurobi} software suite.
This solver uses the \pkg{gurobi} package to solve problems.
For information on the performance of different solvers,
please see Schuster \emph{et al.} (2020) for benchmarks comparing the
run time and solution quality of different solvers when applied to
different sized datasets.
}
\section{Installation}{

Please see the \emph{Gurobi Installation Guide} vignette for details on
installing the \emph{Gurobi} software and the \pkg{gurobi} package.
You can access this vignette
\href{https://prioritizr.net/articles/gurobi_installation_guide.html}{online}
or using the following code:

\if{html}{\out{<div class="sourceCode">}}\preformatted{vignette("gurobi_installation_guide", package = "prioritizr")
}\if{html}{\out{</div>}}
}

\section{Start solution format}{

Broadly speaking, the argument to \code{start_solution} must be in the same
format as the planning unit data in the argument to \code{x}.
Further details on the correct format are listed separately
for each of the different planning unit data formats:

\describe{

\item{\code{x} has \code{numeric} planning units}{The argument to \code{start_solution} must be a
\code{numeric} vector with each element corresponding to a different planning
unit. It should have the same number of planning units as those
in the argument to \code{x}. Additionally, any planning units missing
cost (\code{NA}) values should also have missing (\code{NA}) values in the
argument to \code{start_solution}.
}

\item{\code{x} has \code{matrix} planning units}{The argument to \code{start_solution} must be a
\code{matrix} vector with each row corresponding to a different planning
unit, and each column correspond to a different management zone.
It should have the same number of planning units and zones
as those in the argument to \code{x}. Additionally, any planning units
missing cost (\code{NA}) values for a particular zone should also have a
missing (\code{NA}) values in the argument to \code{start_solution}.
}

\item{\code{x} has \code{\link[terra:rast]{terra::rast()}} planning units}{The argument to \code{start_solution}
be a \code{\link[terra:rast]{terra::rast()}} object where different grid cells (pixels) correspond
to different planning units and layers correspond to
a different management zones. It should have the same dimensionality
(rows, columns, layers), resolution, extent, and coordinate reference
system as the planning units in the argument to \code{x}. Additionally,
any planning units missing cost (\code{NA}) values for a particular zone
should also have missing (\code{NA})  values in the argument to \code{start_solution}.
}

\item{\code{x} has \code{data.frame} planning units}{The argument to \code{start_solution} must
be a \code{data.frame} with each column corresponding to a different zone,
each row corresponding to a different planning unit, and cell values
corresponding to the solution value. This means that if a \code{data.frame}
object containing the solution also contains additional columns, then
these columns will need to be subsetted prior to using this function
(see below for example with \code{\link[sf:sf]{sf::sf()}} data).
Additionally, any planning units missing cost
(\code{NA}) values for a particular zone should also have missing (\code{NA})
values in the argument to \code{start_solution}.
}

\item{\code{x} has \code{\link[sf:sf]{sf::sf()}} planning units}{The argument to \code{start_solution} must be
a \code{\link[sf:sf]{sf::sf()}} object with each column corresponding to a different
zone, each row corresponding to a different planning unit, and cell values
corresponding to the solution value. This means that if the
\code{\link[sf:sf]{sf::sf()}} object containing the solution also contains additional
columns, then these columns will need to be subsetted prior to using this
function (see below for example).
Additionally, the argument to \code{start_solution} must also have the same
coordinate reference system as the planning unit data.
Furthermore, any planning units missing cost
(\code{NA}) values for a particular zone should also have missing (\code{NA})
values in the argument to \code{start_solution}.
}
}
}

\examples{
\dontrun{
# load data
sim_pu_raster <- get_sim_pu_raster()
sim_features <- get_sim_features()

# create problem
p1 <-
  problem(sim_pu_raster, sim_features) \%>\%
  add_min_set_objective() \%>\%
  add_relative_targets(0.1) \%>\%
  add_binary_decisions() \%>\%
  add_gurobi_solver(gap = 0, verbose = FALSE)

# generate solution
s1 <- solve(p1)

# plot solution
plot(s1, main = "solution", axes = FALSE)

# create a similar problem with boundary length penalties and
# specify the solution from the previous run as a starting solution
p2 <-
  problem(sim_pu_raster, sim_features) \%>\%
  add_min_set_objective() \%>\%
  add_relative_targets(0.1) \%>\%
  add_boundary_penalties(10) \%>\%
  add_binary_decisions() \%>\%
  add_gurobi_solver(gap = 0, start_solution = s1, verbose = FALSE)

# generate solution
s2 <- solve(p2)

# plot solution
plot(s2, main = "solution with boundary penalties", axes = FALSE)
}
}
\references{
Gurobi Optimization LLC (2021) Gurobi Optimizer Reference Manual.
\url{https://www.gurobi.com}.

Schuster R, Hanson JO, Strimas-Mackey M, and Bennett JR (2020). Exact
integer linear programming solvers outperform simulated annealing for
solving conservation planning problems. \emph{PeerJ}, 8: e9258.
}
\seealso{
See \link{solvers} for an overview of all functions for adding a solver.

Other solvers: 
\code{\link{add_cbc_solver}()},
\code{\link{add_cplex_solver}()},
\code{\link{add_default_solver}()},
\code{\link{add_highs_solver}()},
\code{\link{add_lsymphony_solver}},
\code{\link{add_rsymphony_solver}()}
}
\concept{solvers}
