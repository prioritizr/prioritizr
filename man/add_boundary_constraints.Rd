% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_boundary_constraints.R
\name{add_boundary_constraints}
\alias{add_boundary_constraints}
\alias{add_boundary_constraints,ConservationProblem,ANY,ANY,ANY,array-method}
\alias{add_boundary_constraints,ConservationProblem,ANY,ANY,ANY,matrix-method}
\alias{add_boundary_constraints,ConservationProblem,ANY,ANY,ANY,data.frame-method}
\alias{add_boundary_constraints,ConservationProblem,ANY,ANY,ANY,ANY-method}
\title{Add boundary constraints}
\usage{
\S4method{add_boundary_constraints}{ConservationProblem,ANY,ANY,ANY,data.frame}(x, threshold, edge_factor, zones, data)

\S4method{add_boundary_constraints}{ConservationProblem,ANY,ANY,ANY,matrix}(x, threshold, edge_factor, zones, data)

\S4method{add_boundary_constraints}{ConservationProblem,ANY,ANY,ANY,ANY}(x, threshold, edge_factor, zones, data)
}
\arguments{
\item{x}{\code{\link[=problem]{problem()}} object.}

\item{threshold}{\code{numeric} value that is used to scale the importance
of selecting planning units that are spatially clumped together compared
to the main problem objective (e.g., solution cost when the argument to
\code{x} has a minimum set objective per \code{\link[=add_min_set_objective]{add_min_set_objective()}}).
The \code{threshold} value must range between 0 and 1, with higher values
resulting in solutions with a higher degree of spatial
clumping, and smaller values prefer solutions with a smaller
degree of clumping.
Note that specifying a \code{threshold} value that is too high may result
in problem infeasibility and, in such cases, a smaller value should
be attempted.
Although \code{threshold} has a theoretical upper bound of 1,
in practice, the maximum value that will result in feasible solutions
will likely be between 0.8 and 0.95.
Additionally, the calculations that underpin this constraint are
different to those for the \code{\link[=add_boundary_penalties]{add_boundary_penalties()}}, and so
the \code{threshold} parameter for this function and the \code{penalty}
parameter for \code{\link[=add_boundary_penalties]{add_boundary_penalties()}} are not similar to each other.}

\item{edge_factor}{\code{numeric} proportion to scale
planning unit edges (borders) that do not have any neighboring planning
units. For example, an edge factor of \code{0.5} is commonly used to
avoid overly penalizing planning units along a coastline.
Note that this argument must have an element for each zone in the argument
to \code{x}.}

\item{zones}{\code{matrix} or \code{Matrix} object describing the
clumping scheme for different zones. Each row and column corresponds to a
different zone in the argument to \code{x}, and cell values indicate the
relative importance of clumping planning units that are allocated to
a combination of zones. Cell values along the diagonal of the matrix
represent the relative importance of clumping planning units that are
allocated to the same zone. Cell values must range between 1 and 0.
The default
argument to \code{zones} is an identity
matrix (i.e., a matrix with ones along the matrix diagonal and zeros
elsewhere), so that exposed boundaries are calculated when neighboring
planning units are not assigned to the same zone. If the cells along
the matrix diagonal contain markedly smaller values than those found
elsewhere in the matrix, then solutions are preferred that surround
planning units with those allocated to different zones
(i.e., greater spatial fragmentation).}

\item{data}{\code{NULL}, \code{data.frame}, \code{matrix}, or \code{Matrix}
object containing the boundary data. These data describe the total
amount of boundary (perimeter) length  for each planning unit,
and the amount of boundary (perimeter) length shared between different
planning units (i.e., planning units that are adjacent to each other).
See the Data format section for more information.}
}
\value{
An updated \code{\link[=problem]{problem()}} object with the constraints added to it.
}
\description{
Add constraints to a conservation planning problem to favor solutions
that spatially clump planning units together based on the overall
boundary length (i.e., total perimeter).
}
\details{
This function adds constraints to a conservation planning problem
to avoid fragmented solutions.
Note that this function can only
be used to represent symmetric relationships between planning units. If
asymmetric relationships are required, use the
\code{\link[=add_connectivity_penalties]{add_connectivity_penalties()}} function.
Additionally, this function cannot be used to promote the selection
of highly fragmented solutions (unlike \code{\link[=add_boundary_penalties]{add_boundary_penalties()}}).
}
\section{Mathematical formulation}{

The boundary constraints are implemented using the following equations. Let
\eqn{I} represent the set of planning units
(indexed by \eqn{i} or \eqn{j}), \eqn{Z} represent
the set of management zones (indexed by \eqn{z} or \eqn{y}), and
\eqn{X_{iz}}{Xiz} represent the decision
variable for planning unit \eqn{i} for in zone \eqn{z} (e.g., with binary
values one indicating if planning unit is allocated or not). Also, let
\eqn{t} represent the argument to \code{threshold},
\eqn{B_{ij}}{Bij} represent the matrix argument
to \code{data} (e.g., generated using \code{\link[=boundary_matrix]{boundary_matrix()}}), and
\eqn{W_{zz}}{Wzz} represent the matrix argument to \code{zones}..
Additionally, let \eqn{T_i} denote the total boundary for planning unit
\eqn{i}, \eqn{E_{iz}} indicate the proportion of the perimeter for
planning unit \eqn{i} that is surrounded by other selected planning units.

\deqn{
\sum_{i}^{I} \sum_{z}^{Z} (-t \times E_{iz}) + X_{iz} \geq 0 \\
T_{i} = \sum_{j}^{J} B_{ij} \\
E_{iz} \leq X_{iz} \\
(T_i \times E_{iz}) - \sum_{j}^{I} \sum_{y}^{Z} W_{zy} \times B_{ij} \times X_{jy} \geq 0
}{
sum_i^I sum_z^Z (-t * Eiz) + Xiz >= 0
Ti = sum_j^J Bij
Eiz <= Xiz
(Ti \times Eiz) - sum_j^I sum_y^Z Wzy * Bij * Xjy >= 0
}

Note that when the problem objective is to maximize some measure of
benefit and not minimize some measure of cost, the term \eqn{t} is
replaced with \eqn{t}.
}

\section{Data format}{

The argument to \code{data} can be specified using the following formats.
Note that boundary data must always describe symmetric relationships
between planning units.

\describe{

\item{\code{data} as a \code{NULL} value}{indicating that the data should be
automatically calculated using the \code{\link[=boundary_matrix]{boundary_matrix()}} function.
This argument is the default.
Note that the boundary data must be supplied
using one of the other formats below if the planning unit data
in the argument to \code{x} do not explicitly contain spatial information
(e.g., planning unit data are a \code{data.frame} or \code{numeric} class).}

\item{\code{data} as a \code{matrix}/\code{Matrix} object}{where rows and columns represent
different planning units and the value of each cell represents the
amount of shared boundary length between two different planning units.
Cells that occur along the matrix diagonal denote the total
boundary length associated with each planning unit.}

\item{\code{data} as a \code{data.frame} object}{with the columns \code{"id1"},
\code{"id2"}, and \code{"boundary"}. The \code{"id1"} and \code{"id2"} columns contain
identifiers (indices) for a pair of planning units, and the \code{"boundary"}
column contains the amount of shared boundary length between these
two planning units.
Additionally, if the values in the \code{"id1"} and \code{"id2"} columns
contain the same values, then the value denotes the
amount of exposed boundary length (not total boundary).
This format follows the the standard \emph{Marxan} format for boundary
data (i.e., per the "bound.dat" file).}

}
}

\examples{
\dontrun{
# set seed for reproducibility
set.seed(500)

# load data
sim_pu_raster <- get_sim_pu_raster()
sim_features <- get_sim_features()
sim_zones_pu_raster <- get_sim_zones_pu_raster()
sim_zones_features <- get_sim_zones_features()

# create minimal problem
p1 <-
  problem(sim_pu_raster, sim_features) \%>\%
  add_min_set_objective() \%>\%
  add_relative_targets(0.2) \%>\%
  add_binary_decisions() \%>\%
  add_default_solver(verbose = FALSE)

# create problem with low boundary constraints threshold
p2 <- p1 \%>\% add_boundary_constraints(0.4, 1)

# create problem with high boundary constraints threshold
# but outer edges receive half the value as inner edges
p3 <- p1 \%>\% add_boundary_constraints(0.8, 0.5)

# create a problem using precomputed boundary data
bmat <- boundary_matrix(sim_pu_raster)
p4 <- p1 \%>\% add_boundary_constraints(0.8, 1, data = bmat)

# solve problems
s1 <- c(solve(p1), solve(p2), solve(p3), solve(p4))
names(s1) <- c("basic solution", "small threshold", "high threshold",
  "precomputed data"
)

# plot solutions
plot(s1, axes = FALSE)

# create minimal problem with multiple zones and limit the run-time for
# solver to 10 seconds so this example doesn't take too long
p5 <-
  problem(sim_zones_pu_raster, sim_zones_features) \%>\%
  add_min_set_objective() \%>\%
  add_relative_targets(matrix(0.2, nrow = 5, ncol = 3)) \%>\%
  add_binary_decisions() \%>\%
  add_default_solver(time_limit = 10, verbose = FALSE)

# create zone matrix which favors clumping planning units that are
# allocated to the same zone together - note that this is the default
zm6 <- diag(3)
print(zm6)

# create problem with the zone matrix and low constraints threshold
p6 <- p5 \%>\% add_boundary_constraints(0.2, zone = zm6)

# create another problem with the same zone matrix and higher
# constraints threshold
p7 <- p5 \%>\% add_boundary_constraints(0.6, zone = zm6)

# create zone matrix which strongly favors clumping units
# that are allocated to the same zone together. It will also prefer
# clumping planning units in zones 1 and 2 together over having
# these planning units with no neighbors in the solution
zm8 <- diag(3)
zm8[upper.tri(zm8)] <- c(0.3, 0, 0)
zm8[lower.tri(zm8)] <- zm8[upper.tri(zm8)]
print(zm8)

# create problem with the zone matrix
p8 <- p5 \%>\% add_boundary_constraints(0.6, zone = zm8)

# solve problems
s2 <- list(solve(p5), solve(p6), solve(p7), solve(p8))

# convert to category layers for visualization
s2 <- terra::rast(lapply(s2, category_layer))
names(s2) <- c(
  "basic solution", "within zone clumping (low)",
  "within zone clumping (high)", "within + between clumping"
)

# plot solutions
plot(s2, axes = FALSE)
}

}
\seealso{
Other constraints: 
\code{\link{add_contiguity_constraints}()},
\code{\link{add_feature_contiguity_constraints}()},
\code{\link{add_linear_constraints}()},
\code{\link{add_locked_in_constraints}()},
\code{\link{add_locked_out_constraints}()},
\code{\link{add_mandatory_allocation_constraints}()},
\code{\link{add_manual_bounded_constraints}()},
\code{\link{add_manual_locked_constraints}()},
\code{\link{add_neighbor_constraints}()}
}
\concept{constraints}
