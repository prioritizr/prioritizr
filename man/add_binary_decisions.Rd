% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_binary_decisions.R
\name{add_binary_decisions}
\alias{add_binary_decisions}
\title{Add binary decisions}
\usage{
add_binary_decisions(x)
}
\arguments{
\item{x}{\code{\link[=problem]{problem()}} (i.e. \code{\linkS4class{ConservationProblem}}) object.}
}
\value{
Object (i.e. \code{\linkS4class{ConservationProblem}}) with the decisions added
to it.
}
\description{
Add a binary decision to a conservation planning \code{\link[=problem]{problem()}}.
This is the classic decision of either prioritizing or not prioritizing a
planning unit. Typically, this decision has the assumed action of buying
the planning unit to include in a protected area network. If no decision is
added to a problem then this decision class will be used by default.
}
\details{
Conservation planning problems involve making decisions on planning
units. These decisions are then associated with actions (e.g. turning a
planning unit into a protected area). Only a
single decision should be added to a \code{ConservationProblem} object.
Note that if multiple decisions are added to a problem object, then the
last one to be added will be used.
}
\examples{
# set seed for reproducibility
set.seed(500)

# load data
data(sim_pu_raster, sim_features, sim_pu_zones_stack, sim_features_zones)

# create minimal problem with binary decisions
p1 <- problem(sim_pu_raster, sim_features) \%>\%
      add_min_set_objective() \%>\%
      add_relative_targets(0.1) \%>\%
      add_binary_decisions() \%>\%
      add_default_solver(verbose = FALSE)
\dontrun{
# solve problem
s1 <- solve(p1)

# plot solution
plot(s1, main = "solution")
}
# build multi-zone conservation problem with binary decisions
p2 <- problem(sim_pu_zones_stack, sim_features_zones) \%>\%
      add_min_set_objective() \%>\%
      add_relative_targets(matrix(runif(15, 0.1, 0.2), nrow = 5,
                                  ncol = 3)) \%>\%
      add_binary_decisions() \%>\%
      add_default_solver(verbose = FALSE)
\dontrun{
# solve the problem
s2 <- solve(p2)

# print solution
print(s2)

# plot solution
plot(category_layer(s2), main = "solution", axes = FALSE, box = FALSE)
}
}
\seealso{
See \link{decisions} for an overview of all functions for adding decisions.

Other decisions: 
\code{\link{add_default_decisions}()},
\code{\link{add_proportion_decisions}()},
\code{\link{add_semicontinuous_decisions}()}
}
\concept{decisions}
